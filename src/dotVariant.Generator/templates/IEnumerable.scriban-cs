{{~
# Copyright Miro Knejp 2021.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
~}}
{{~
func $get_n()
    ret get_n "_variant"
end
func $get_value(param)
    ret get_value param "_variant"
end
~}}
{{~ if Options.ExtensionClassNamespace ~}}
namespace {{ Options.ExtensionClassNamespace }}
{
{{~ end ~}}
    {{ Variant.ExtensionsAccessibility }} static partial class {{ Variant.Name }}Ex
    {
        {{~ ## Match(IEnumerable<V>, Func<A, R>) ## ~}}
        {{~ for $p in Params ~}}
        /// <summary>
        /// Transform a {{ Variant.Name }}-based enumerable sequence by applying a selector function to those elements
        /// containing a value of type <see cref="{{ cref $p.Type }}"/> and dropping all others.
        /// </summary>
        /// <param name="_source">An enumerable sequence whose elements to match on.</param>
        /// <param name="{{ $p.Name }}">Function applied to matching elements and whose value to surface from the resulting sequence.</param>
        /// <returns>An enumerable sequence that contains the matched and transformed elements of the input sequence.</returns>
        /// <exception cref="global::System.Exception">Any exception thrown from a delegate is rethrown.</exception>
        /// <typeparam name="TResult">The resulting sequence's element type.</typeparam>
        public static global::System.Collections.Generic.IEnumerable<TResult>
            Match<TResult{{ appended_type_parameters }}>(
                this global::System.Collections.Generic.IEnumerable<{{ Variant.QualifiedType }}> _source,
                {{ func_type $p }} {{ $p.Identifier }})
        {{~ for $tp in constrained_type_parameters ~}}
            where {{ $tp.Identifier }} : {{ array.join $tp.Constraints ", " }}
        {{~ end ~}}
        {
            foreach (var _variant in _source)
            {
                if ({{ $get_n }} == {{ $p.Index }})
                {
                    yield return {{ $p.Identifier }}({{ $get_value $p }});
                }
            }
        }
        {{~ end ~}}

        {{~ ## Match(IEnumerable<V>, Func<A, R>, R) ## ~}}
        {{~ for $p in Params ~}}
        /// <summary>
        /// Transform a {{ Variant.Name }}-based enumerable sequence by applying a selector function to those elements
        /// containing a value of type <see cref="{{ cref $p.Type }}"/> and replacing all others by a fallback value.
        /// </summary>
        /// <param name="_source">An enumerable sequence whose elements to match on.</param>
        /// <param name="{{ $p.Name }}">Function applied to matching elements and whose value to surface from the resulting sequence.</param>
        /// <param name="_">Value to produce for elements which do not match the desired type.</param>
        /// <returns>An enumerable sequence that contains the matched and transformed elements of the input sequence.</returns>
        /// <exception cref="global::System.Exception">Any exception thrown from a delegate is rethrown.</exception>
        /// <typeparam name="TResult">The resulting sequence's element type.</typeparam>
        public static global::System.Collections.Generic.IEnumerable<TResult>
            Match<TResult{{ appended_type_parameters }}>(
                this global::System.Collections.Generic.IEnumerable<{{ Variant.QualifiedType }}> _source,
                {{ func_type $p }} {{ $p.Identifier }},
                TResult _)
        {{~ for $tp in constrained_type_parameters ~}}
            where {{ $tp.Identifier }} : {{ array.join $tp.Constraints ", " }}
        {{~ end ~}}
        {
            foreach (var _variant in _source)
            {
                if ({{ $get_n }} == {{ $p.Index }})
                {
                    yield return {{ $p.Identifier }}({{ $get_value $p }});
                }
                else
                {
                    yield return _;
                }
            }
        }
        {{~ end ~}}

        {{~ ## Match(IEnumerable<V>, Func<A, R>, Func<R>) ## ~}}
        {{~ for $p in Params ~}}
        /// <summary>
        /// Transform a {{ Variant.Name }}-based enumerable sequence by applying a selector function to those elements
        /// containing a value of type <see cref="{{ cref $p.Type }}"/> and replacing all others with the result of a fallback selector.
        /// </summary>
        /// <param name="_source">An enumerable sequence whose elements to match on.</param>
        /// <param name="{{ $p.Name }}">Function applied to matching elements and whose value to surface from the resulting sequence.</param>
        /// <param name="_">Value to produce for elements which do not match the desired type.</param>
        /// <returns>An enumerable sequence that contains the matched and transformed elements of the input sequence.</returns>
        /// <exception cref="global::System.Exception">Any exception thrown from a delegate is rethrown.</exception>
        /// <typeparam name="TResult">The resulting sequence's element type.</typeparam>
        public static global::System.Collections.Generic.IEnumerable<TResult>
            Match<TResult{{ appended_type_parameters }}>(
                this global::System.Collections.Generic.IEnumerable<{{ Variant.QualifiedType }}> _source,
                {{ func_type $p }} {{ $p.Identifier }},
                global::System.Func<TResult> _)
        {{~ for $tp in constrained_type_parameters ~}}
            where {{ $tp.Identifier }} : {{ array.join $tp.Constraints ", " }}
        {{~ end ~}}
        {
            foreach (var _variant in _source)
            {
                if ({{ $get_n }} == {{ $p.Index }})
                {
                    yield return {{ $p.Identifier }}({{ $get_value $p }});
                }
                else
                {
                    yield return _();
                }
            }
        }
        {{~ end ~}}

        {{~ ## Visit(IEnumerable<V>, Func<A, R>, Func<B, R>, ...) ## ~}}
        /// <summary>
        /// Transform a {{ Variant.Name }}-based enumerable sequence by applying a selector function to each element
        /// wich matches the type stored within the value, and throwing <see cref="global::System.InvalidOperationException"/>
        /// if an element is empty.
        /// </summary>
        /// <param name="_source">An enumerable sequence whose elements to match on.</param>
        {{~ for $p in Params ~}}
        /// <param name="{{ $p.Name }}">The delegate to invoke if the element's value is of type <see cref="{{ cref $p.Type }}"/>.</param>
        {{~ end ~}}
        /// <returns>An enumerable sequence that contains the matched and transformed elements of the input sequence.</returns>
        /// <exception cref="global::System.InvalidOperationException">The sequence encountered an empty {{ Variant.Name }}.</exception>
        /// <exception cref="global::System.Exception">Any exception thrown from a delegate is rethrown.</exception>
        /// <typeparam name="TResult">The resulting sequence's element type.</typeparam>
        public static global::System.Collections.Generic.IEnumerable<TResult>
            Visit<TResult{{ appended_type_parameters }}>(
                this global::System.Collections.Generic.IEnumerable<{{ Variant.QualifiedType }}> _source,
                {{ func_params }})
        {{~ for $tp in constrained_type_parameters ~}}
            where {{ $tp.Identifier }} : {{ array.join $tp.Constraints ", " }}
        {{~ end ~}}
        {
            foreach (var _variant in _source)
            {
                switch ({{ $get_n }})
                {
                    case 0:
                        {{ throw_empty_error }};
                        yield break;
                    {{~ for $p in Params ~}}
                    case {{ $p.Index }}:
                        yield return {{ $p.Identifier }}({{ $get_value $p }});
                        break;
                    {{~ end ~}}
                    default:
                        {{ throw_internal_error }};
                        yield break;
                }
            }
        }

        {{~ ## Visit(IEnumerable<V>, Func<A, R>, Func<B, R>, ..., empty) ## ~}}
        /// <summary>
        /// Transform a {{ Variant.Name }}-based enumerable sequence by applying a selector function to each element
        /// wich matches the type stored within the value, and replacing empty elements with the result of a fallback selector.
        /// </summary>
        /// <param name="_source">An enumerable sequence whose elements to match on.</param>
        {{~ for $p in Params ~}}
        /// <param name="{{ $p.Name }}">The delegate to invoke if the element's value is of type <see cref="{{ cref $p.Type }}"/>.</param>
        {{~ end ~}}
        /// <param name="_">The delegate to invoke if an element is empty.</param>
        /// <returns>An enumerable sequence that contains the matched and transformed elements of the input sequence.</returns>
        /// <exception cref="global::System.Exception">Any exception thrown from a delegate is rethrown.</exception>
        /// <typeparam name="TResult">The resulting sequence's element type.</typeparam>
        public static global::System.Collections.Generic.IEnumerable<TResult>
            Visit<TResult{{ appended_type_parameters }}>(
                this global::System.Collections.Generic.IEnumerable<{{ Variant.QualifiedType }}> _source,
                {{ func_params }},
                global::System.Func<TResult> _)
        {{~ for $tp in constrained_type_parameters ~}}
            where {{ $tp.Identifier }} : {{ array.join $tp.Constraints ", " }}
        {{~ end ~}}
        {
            foreach (var _variant in _source)
            {
                switch ({{ $get_n }})
                {
                    case 0:
                        yield return _();
                        break;
                    {{~ for $p in Params ~}}
                    case {{ $p.Index }}:
                        yield return {{ $p.Identifier }}({{ $get_value $p }});
                        break;
                    {{~ end ~}}
                    default:
                        {{ throw_internal_error }};
                        yield break;
                }
            }
        }
    }
{{~ if Options.ExtensionClassNamespace ~}}
}
{{~ end ~}}
