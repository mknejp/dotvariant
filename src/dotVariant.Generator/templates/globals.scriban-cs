{{~
# Copyright Miro Knejp 2021.
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
~}}
{{~ ##
Global input variables are fed from C# RenderInfo members:
- Language : LanguageInfo
- Options : OptionsInfo
- Params : ParamInfo[]
- Runtime : RuntimeInfo
- Variant : VariantInfo
## ~}}
{{~
emit_nullability = Language.Version >= 800 && Language.Nullable == "enable"
readonly emit_nullability

type_parameters = Variant.Generics | array.each @(do; ret $0.Identifier; end) | array.join ", "
readonly type_parameters

type_parameter_list = Variant.Generics == empty ? "" : "<" + type_parameters + ">"
readonly type_parameter_list

open_type_parameter_list = Variant.Generics == empty ? "" : "<" + (Variant.Generics | array.each @(do; ret ""; end) | array.join ",") + ">"
readonly open_type_parameter_list

appended_type_parameters = Variant.Generics == empty ? "" : ", " + type_parameters
readonly appended_type_parameters

constrained_type_parameters = Variant.Generics | array.filter @(do; ret $0.Constraints != empty; end)
readonly constrained_type_parameters

# The type to use for variables and function parameters
variant_nullable_param = emit_nullability && Variant.IsReferenceType ? (Variant.Type + "?" ) : Variant.Type
readonly variant_nullable_param

func func_type(param, result = "TResult")
    ret "global::System.Func<" + param.Type + ", " + result + ">"
end
readonly func_type

func action_type(param)
    ret "global::System.Action<" + param.Type + ">"
end
readonly action_type

# Conditionally apply a null-caolescing member access with trailing null-expression after the ??
func coalesce(type, expression, sub_expression, null_expression = null)
    if type.CanBeNull
        ret expression + "?" + sub_expression + (null_expression != null ? (" ?? " + null_expression) : "")
    else
        ret expression + sub_expression
    end
end
readonly coalesce

func coalesce_ToString(param, expression)
    ret expression + (param.CanBeNull ? "?" : "") + ".ToString()" + (param.IsToStringNullable || param.CanBeNull ? " ?? \"null\"" : "")
end
readonly coalesce_ToString

func annotate_NotNullWhen(param)
    ret emit_nullability && !param.CanBeNull ? "[global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] " : ""
end
readonly annotate_NotNullWhen

func annotate_NotNull(param)
    ret emit_nullability && !param.CanBeNull ? "[global::System.Diagnostics.CodeAnalysis.NotNull] " : ""
end
readonly annotate_NotNull

func throw_mismatch_error(expected, actual, type = "")
    ret "global::dotVariant.GeneratorSupport.Errors.ThrowMismatchError" + (type == "" ? "" : "<" + type + ">") + "(" + ([string.literal Variant.DiagType, string.literal expected, actual] | array.join ", ") + ")"
end
readonly throw_mismatch_error

func throw_internal_error(type = "")
    ret "global::dotVariant.GeneratorSupport.Errors.ThrowInternalError" + (type == "" ? "" : "<" + type + ">") + "(" + (string.literal Variant.DiagType) + ")"
end
readonly throw_internal_error

func throw_empty_error(type = "")
    ret "global::dotVariant.GeneratorSupport.Errors.ThrowEmptyError" + (type == "" ? "" : "<" + type + ">") + "(" + (string.literal Variant.DiagType) + ")"
end
readonly throw_empty_error_error

func make_mismatch_error(expected, actual)
    ret "global::dotVariant.GeneratorSupport.Errors.MakeMismatchError(" + ([string.literal Variant.DiagType, string.literal expected, actual] | array.join ", ") + ")"
end
readonly make_mismatch_error

func make_internal_error()
    ret "global::dotVariant.GeneratorSupport.Errors.MakeInternalError(" + (string.literal Variant.DiagType) + ")"
end
readonly make_internal_error

func make_empty_error()
    ret "global::dotVariant.GeneratorSupport.Errors.MakeEmptyError(" + (string.literal Variant.DiagType) + ")"
end
readonly make_empty_error_error

storage_type = "global::dotVariant._G." + (Variant.Namespace ? Variant.Namespace + "." : "") + Variant.Type
readonly storage_type

func get_value(param, expression = "_variant")
    ret "((global::dotVariant.GeneratorSupport.Accessor_" + param.Index + "<" + param.Type + ">)" + expression + ").Value"
end
readonly get_value

func get_n(expression = "_variant")
    ret "((int)(global::dotVariant.GeneratorSupport.Discriminator)" + expression + ")"
end
readonly get_n

func cref(name)
    ret name | string.replace "<" "{" | string.replace ">" "}"
end
readonly cref

func accessor(index, type)
    ret "global::dotVariant.GeneratorSupport.Accessor_" + index + "<" + type + ">"
end
readonly accessor

func_types = Params | array.each @(do; ret func_type $0; end) | array.join ", "
func_params = Params | array.each @(do; ret (func_type $0) + " " + $0.Identifier; end) | array.join ", "
action_types = Params | array.each @(do; ret action_type $0; end) | array.join ", "
action_params = Params | array.each @(do; ret (action_type $0) + " " + $0.Identifier; end) | array.join ", "
method_modifiers = !Variant.IsReferenceType && Language.Version >= 800 ? "readonly " : ""
param_modifiers = !Variant.IsReferenceType && Variant.IsReadonly && Language.Version >= 702 ? "in " : ""
global_nullable = emit_nullability ? "?" : ""
global_forgive = emit_nullability ? "!" : ""
needs_dispose = (Params | array.filter @(do; ret $0.IsDisposable; end) | array.size) > 0
forward_params = Params | array.each @(do; ret $0.Identifier; end) | array.join ", "
discriminator = "global::dotVariant.GeneratorSupport.Discriminator"
object_accessor = "global::dotVariant.GeneratorSupport.ObjectAccessor"
is_generic = Variant.Generics != empty

readonly func_types
readonly func_params
readonly action_types
readonly action_params
readonly method_modifiers
readonly param_modifiers
readonly global_nullable
readonly global_forgive
readonly needs_dispose
readonly forward_params
readonly discriminator
readonly object_accessor
readonly is_generic
~}}
